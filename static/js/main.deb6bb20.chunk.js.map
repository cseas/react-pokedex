{"version":3,"sources":["components/PokemonCard.jsx","components/PokemonGrid.jsx","components/TitleBar.jsx","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","props","useState","pokemonData","setPokemonData","isPokemonDataLoading","setIsPokemonDataLoading","getPokemonData","a","fetch","pokemon","url","response","json","data","useEffect","className","src","id","width","alt","name","order","types","type","PokemonGrid","isPokemonListLoading","setIsPokemonListLoading","pokemons","setPokemons","getPokemons","results","map","TitleBar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEO,SAASA,EAAYC,GAAQ,IAAD,EACKC,mBAAS,IADd,mBAC1BC,EAD0B,KACbC,EADa,OAEuBF,oBAAS,GAFhC,mBAE1BG,EAF0B,KAEJC,EAFI,KAI3BC,EAAc,uCAAG,8BAAAC,EAAA,sEACEC,MAAMR,EAAMS,QAAQC,KADtB,cACfC,EADe,gBAEFA,EAASC,OAFP,OAEfC,EAFe,OAGrBV,EAAeU,GACfR,GAAwB,GAJH,2CAAH,qDAWpB,OAJAS,qBAAU,WACRR,MACC,IAEEF,EAiBS,0CAfV,oCACE,yBAAKW,UAAU,QACb,yBACEC,IAAG,wDAAmDd,EAAYe,GAA/D,QACHC,MAAO,IACPC,IAAI,KAEN,4BACE,2BAAInB,EAAMS,QAAQW,OAEpB,kCAAQlB,EAAYmB,OACpB,oCAAUnB,EAAYoB,MAAM,GAAGC,KAAKH,QCzBvC,SAASI,IAAc,MAE4BvB,oBAAS,GAFrC,mBAErBwB,EAFqB,KAECC,EAFD,OAGIzB,mBAAS,IAHb,mBAGrB0B,EAHqB,KAGXC,EAHW,KAKtBC,EAAW,uCAAG,8BAAAtB,EAAA,sEACKC,MARX,+CAOM,cACZG,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBe,EAAYf,EAAKiB,SACjBJ,GAAwB,GAJN,2CAAH,qDAWjB,OAJAZ,qBAAU,WACRe,MACC,IAEEJ,EAQS,0CANV,yBAAKV,UAAU,aACZY,EAASI,KAAI,SAACtB,GAAD,OACZ,kBAACV,EAAD,CAAaU,QAASA,QCvBzB,SAASuB,IACd,OACE,yBAAKjB,UAAU,aACb,wC,MCWSkB,MATf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAACiB,EAAD,MACA,kBAACR,EAAD,QCCcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.deb6bb20.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport function PokemonCard(props) {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [isPokemonDataLoading, setIsPokemonDataLoading] = useState(true);\n\n  const getPokemonData = async () => {\n    const response = await fetch(props.pokemon.url);\n    const data = await response.json();\n    setPokemonData(data);\n    setIsPokemonDataLoading(false);\n  };\n\n  useEffect(() => {\n    getPokemonData();\n  }, []);\n\n  if (!isPokemonDataLoading) {\n    return (\n      <>\n        <div className=\"card\">\n          <img\n            src={`https://pokeres.bastionbot.org/images/pokemon/${pokemonData.id}.png`}\n            width={100}\n            alt=\"\"\n          />\n          <h4>\n            <b>{props.pokemon.name}</b>\n          </h4>\n          <p>Id: {pokemonData.order}</p>\n          <p>Type: {pokemonData.types[0].type.name}</p>\n        </div>\n      </>\n    );\n  } else return <h3>Loading...</h3>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { PokemonCard } from \"./PokemonCard\";\n\nconst PokeAPI = \"https://pokeapi.co/api/v2/pokemon?limit=150\";\n\nexport function PokemonGrid() {\n  // Hooks\n  const [isPokemonListLoading, setIsPokemonListLoading] = useState(true);\n  const [pokemons, setPokemons] = useState([]);\n\n  const getPokemons = async () => {\n    const response = await fetch(PokeAPI);\n    const data = await response.json();\n    setPokemons(data.results);\n    setIsPokemonListLoading(false);\n  };\n\n  useEffect(() => {\n    getPokemons();\n  }, []);\n\n  if (!isPokemonListLoading) {\n    return (\n      <div className=\"container\">\n        {pokemons.map((pokemon) => (\n          <PokemonCard pokemon={pokemon} />\n        ))}\n      </div>\n    );\n  } else return <h3>Loading...</h3>;\n}\n","import React from \"react\";\n\nexport function TitleBar() {\n  return (\n    <div className=\"title-bar\">\n      <h3>PokeDex</h3>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { PokemonGrid } from \"./components/PokemonGrid\";\nimport { TitleBar } from \"./components/TitleBar\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TitleBar />\n      <PokemonGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}